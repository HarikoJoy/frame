package com.frame.hariko.mybatis.plugin;

import java.util.List;

import org.mybatis.generator.api.IntrospectedColumn;
import org.mybatis.generator.api.IntrospectedTable;
import org.mybatis.generator.api.dom.java.FullyQualifiedJavaType;
import org.mybatis.generator.api.dom.java.Interface;
import org.mybatis.generator.api.dom.java.Method;
import org.mybatis.generator.api.dom.java.Parameter;
import org.mybatis.generator.api.dom.java.TopLevelClass;
import org.mybatis.generator.api.dom.xml.Attribute;
import org.mybatis.generator.api.dom.xml.Document;
import org.mybatis.generator.api.dom.xml.TextElement;
import org.mybatis.generator.api.dom.xml.XmlElement;

public class UpdateByModelSelectivePlugin extends MyBatisPlugin {
	private final String methodName = "updateByModelSelective";

	public boolean validate(List<String> warnings) {
		return true;
	}

	public boolean clientGenerated(Interface interfaze, TopLevelClass topLevelClass, IntrospectedTable introspectedTable) {
		genUpdateByModelSelectiveMethod(interfaze, topLevelClass, introspectedTable);

		return true;
	}

	public boolean sqlMapDocumentGenerated(Document document, IntrospectedTable introspectedTable) {
		genUpateByModelSelectiveSql(document, introspectedTable);
		return true;
	}

	private void genUpdateByModelSelectiveMethod(Interface interfaze, TopLevelClass topLevelClass, IntrospectedTable introspectedTable) {
		String modelName = introspectedTable.getTableConfiguration().getDomainObjectName();

		getClass();
		Method method = new Method(methodName);
		method.setVisibility(org.mybatis.generator.api.dom.java.JavaVisibility.PUBLIC);
		method.setReturnType(new FullyQualifiedJavaType("java.lang.Integer"));
		Parameter parameter = new Parameter(new FullyQualifiedJavaType(modelName), "cond", "@Param(\"cond\")");
		method.addParameter(parameter);
		parameter = new Parameter(new FullyQualifiedJavaType("java.lang.boolean"), "strict", "@Param(\"strict\")");
		method.addParameter(parameter);
		parameter = new Parameter(new FullyQualifiedJavaType(modelName), "model", "@Param(\"model\")");
		method.addParameter(parameter);

		genSelectCountByModelSelectiveComment(method, introspectedTable);
		interfaze.addMethod(method);
	}

	private void genSelectCountByModelSelectiveComment(Method method, IntrospectedTable introspectedTable) {
		method.addJavaDocLine("/**");
		method.addJavaDocLine(" * 此方法根据cond设置条件更新model中设置的字段值;<br/>");
		method.addJavaDocLine(" * 此条件判断其值不为 null且不为空'';<br/>");
		method.addJavaDocLine(" * 若strict为true则精确匹配所有值,若为false则模糊匹配所有类型为String的值;<br/>");
		method.addJavaDocLine(" * This method was generated by MyBatis Generator.<br/>");

		StringBuilder sb = new StringBuilder();
		sb.append(" * This method corresponds to the database table<br/> ");
		sb.append(introspectedTable.getFullyQualifiedTable());
		method.addJavaDocLine(sb.toString());

		addJavadocTag(method, false);

		method.addJavaDocLine(" */");
	}

	@SuppressWarnings("unused")
	private void genUpateByModelSelectiveSql(Document document, IntrospectedTable introspectedTable) {
		XmlElement element = new XmlElement("update");
		getClass();
		Attribute attribute = new Attribute("id", "updateByModelSelective");
		element.addAttribute(attribute);
		attribute = new Attribute("parameterType", "map");
		element.addAttribute(attribute);
		this.context.getCommentGenerator().addComment(element);

		StringBuilder sb = new StringBuilder();
		int level1 = 1;
		int level2 = 2;
		int level3 = 3;
		int level4 = 4;
		int level5 = 5;

		sb.append("update ").append(introspectedTable.getFullyQualifiedTableNameAtRuntime()).append("\n");

		genUpdateSetSql(document, introspectedTable, sb);

		sb.append(indent(level2) + "<where>\n");
		sb.append(indent(level3) + "<include refid=\"" + this.DYNAMIC_SQL_ID + "\" />\n");
		sb.append(indent(level2) + "</where>");

		TextElement text = new TextElement(sb.toString());
		element.addElement(text);
		document.getRootElement().addElement(element);
	}

	private void genUpdateSetSql(Document document, IntrospectedTable introspectedTable, StringBuilder sb) {
		sb.append(indent(2)).append("<set>\n");

		for (IntrospectedColumn col : introspectedTable.getAllColumns()) {
			String modelProperty = col.getJavaProperty();
			sb.append(indent(3) + "<if test=\"model.");
			sb.append(modelProperty);
			sb.append(" != null");
			sb.append("\">\n");
			sb.append(indent(4)).append(col.getActualColumnName());
			sb.append(" = #{model." + modelProperty + ", jdbcType=" + col.getJdbcTypeName() + "},\n");
			sb.append(indent(3) + "</if>\n");
		}
		sb.append(indent(2) + "</set>\n");
	}
}
